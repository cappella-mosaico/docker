version: '3.3'

services:

  reverseproxy:
    build:
      context: ../reverseproxy
      dockerfile: Dockerfile
    ports:
      - 80:3000
      - 8888:9090
    restart: always

  front-admin-prod:
    depends_on:
      - reverseproxy
    image: front-admin-prod
    restart: always

  gateway:
    depends_on:
      - reverseproxy
    image: gateway
    restart: always
    environment:
      - IPMOSAICO_ALLOW_HOST=${IPMOSAICO_ALLOW_HOST}

  comunicacao:
    image: comunicacao
    restart: always
    environment:
      - ONE_SIGNAL_APP_ID=${ONE_SIGNAL_APP_ID}
      - ONE_SIGNAL_APP_KEY=${ONE_SIGNAL_APP_KEY}
    depends_on:
      - kafka

  db-pastorais:
    build:
      context: ./db
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  pastorais:
    image: pastorais
    restart: always
    depends_on:
      - db-pastorais
      - kafka

  db-financeiro:
    build:
      context: ./db-financeiro
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  financeiro:
    image: financeiro
    restart: always
    depends_on:
      - db-financeiro
      - kafka

  db-eventos:
    build:
      context: ./db-eventos
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  eventos:
    image: eventos
    restart: always
    depends_on:
      - db-eventos
      - kafka

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.7
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3
    restart: always
    ports:
      - "29092:29092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  init-kafka:
    image: docker.io/bitnami/kafka:3
    restart: always
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic novas-pastorais --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic lembretes-pastorais --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic novo-relatorio-financeiro --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
